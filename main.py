# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import telebot
from telebot import types
import webbrowser
import logging
import requests
import ipinfo
from geopy.geocoders import Nominatim
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('8137672279:AAEV7GXa-SkT6kALay2N29dSvU2tgkoGIV4') 

# API
IPINFO = 'f52507bbfd74da'
WEATHER = 'c9f078e70661690986911a690bfcb0fe'
USER_DATA_FILE = 'user_info.json'  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ –∫–æ–¥–µ—Ä–∞
geocoder = Nominatim(user_agent="city_gide_bot")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ user_data: {e}")
            return {}
    return {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è user_data: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_data = load_user_data()

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
def normalize_city_name(city):
    city_mapping = {
        "Moscow": "–ú–æ—Å–∫–≤–∞",
        "Saint Petersburg": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "St. Petersburg": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "Tyumen": "–¢—é–º–µ–Ω—å",
        "Samara": "–°–∞–º–∞—Ä–∞",
        "Tymen": "–¢—é–º–µ–Ω—å",
        "Tyumen'": "–¢—é–º–µ–Ω—å",
        "SPB": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–ü–∏—Ç–µ—Ä": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    }
    return city_mapping.get(city, city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def greeting_user(message):
    try:
        text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π {message.from_user.first_name}!\n"
            "–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–∑–Ω–∞—Ç—å?\n"
            "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /main_commands."
        )
        bot.send_message(message.chat.id, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /main_commands
@bot.message_handler(commands=['main_commands'])
def show_commands_from_user(message):
    try:
        commands = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
            "/find_city - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ IP\n"
            "/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
            "/catalog - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        )
        bot.send_message(message.chat.id, commands)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /main_commands: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–∞–Ω–¥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def helping_user(message):
    help_text = (
        "–ü–æ–º–æ—â—å:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π /main_commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n"
        "2. FAQ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.\n"
        "3. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ —Å—é–¥–∞ @Max1m_ML."
    )
    bot.send_message(message.chat.id, help_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_city
@bot.message_handler(commands=['find_city'])
def find_city_by_ip(message):
    try:
        command_parts = message.text.split(maxsplit=1)
        
        if len(command_parts) > 1:
            city = command_parts[1].strip()
            user_data[str(message.chat.id)] = {
                'city': city,
                'confirmed': True
            }
            save_user_data()
            bot.reply_to(message, f"‚úÖ –ì–æ—Ä–æ–¥ {city} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            return
            
        handler = ipinfo.getHandler(IPINFO)
        details = handler.getDetails()
        
        if details.city:
            city = normalize_city_name(details.city)
            user_data[str(message.chat.id)] = {
                'city': city,
                'confirmed': False
            }
            
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton('‚úÖ –î–∞', callback_data=f'confirm_{city}'),
                types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='ask_manual')
            )
            bot.reply_to(
                message, 
                f"üìç –ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤–∞—à –≥–æ—Ä–æ–¥ –∫–∞–∫: {city}\n–≠—Ç–æ –≤–µ—Ä–Ω–æ?", 
                reply_markup=markup
            )
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: /find_city –ú–æ—Å–∫–≤–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@bot.callback_query_handler(func=lambda call: True)
def handle_city_confirmation(call):
    try:
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        
        if call.data.startswith('confirm_'):
            city = call.data.split('_', 1)[1]
            user_data[str(call.message.chat.id)] = {
                'city': city,
                'confirmed': True
            }
            save_user_data()
            bot.send_message(
                call.message.chat.id,
                f"‚úÖ –ì–æ—Ä–æ–¥ {city} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /catalog"
            )
            
        elif call.data == 'ask_manual':
            bot.send_message(
                call.message.chat.id,
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/find_city –ú–æ—Å–∫–≤–∞"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –ö–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
CITY_CATALOG = {
    "–ú–æ—Å–∫–≤–∞": {
        "–û—Å–Ω–æ–≤–Ω—ã–µ": ["–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "–ö—Ä–µ–º–ª—å", "–ê—Ä–±–∞—Ç"],
        "–ö–∞—Ñ–µ": ["–ö–∞—Ñ–µ –ü—É—à–∫–∏–Ω", "–ú—É-–ú—É", "–ß–∞–π—Ö–æ–Ω–∞ ‚Ññ1"],
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã": ["Twins Garden", "White Rabbit", "Selfie"],
        "–ü–∞—Ä–∫–∏": ["–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ", "–í–î–ù–•", "–¶–∞—Ä–∏—Ü—ã–Ω–æ"],
        "–ú—É–∑–µ–∏": ["–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è", "–ú—É–∑–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ ¬´–ì–∞—Ä–∞–∂¬ª", "–ü—É—à–∫–∏–Ω—Å–∫–∏–π –º—É–∑–µ–π"]
    },
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {
        "–û—Å–Ω–æ–≤–Ω—ã–µ": ["–≠—Ä–º–∏—Ç–∞–∂", "–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å", "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å"],
        "–ö–∞—Ñ–µ": ["–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∫–∞", "–ë—É—à–µ", "–ö–æ–ö–æ–ö–æ"],
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã": ["Probka", "–°–∞–¥", "Il Lago dei Cigni."],
        "–ü–∞—Ä–∫–∏": ["–õ–µ—Ç–Ω–∏–π —Å–∞–¥", "–ú–∞—Ä—Å–æ–≤–æ –ø–æ–ª–µ", "–ï–ª–∞–≥–∏–Ω –æ—Å—Ç—Ä–æ–≤"],
        "–ú—É–∑–µ–∏": ["–ú—É–∑–µ–π –∂–µ–ª–µ–∑–Ω—ã—Ö –¥–æ—Ä–æ–≥ –†–æ—Å—Å–∏–∏", "–í–æ–µ–Ω–Ω–æ-–º–æ—Ä—Å–∫–æ–π –º—É–∑–µ–π", "–≠—Ä–º–∏—Ç–∞–∂"]
    },
    "–¢—é–º–µ–Ω—å": {
        "–û—Å–Ω–æ–≤–Ω—ã–µ": ["–ú–æ—Å—Ç –≤–ª—é–±–ª—ë–Ω–Ω—ã—Ö", "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è —Ä–µ–∫–∏ –¢—É—Ä—ã", "–°–∫–≤–µ—Ä –°–∏–±–∏—Ä—Å–∫–∏—Ö –∫–æ—à–µ–∫"],
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã": ["150 meters", "Calcutta wine club", "Cafe 15/86"],
        "–ö–∞—Ñ–µ": ["–ö–∞—Ü–æ –•–∏–Ω–∫–∞–ª—å–Ω–∞—è", "–ë–∞—à–∏ –ì—Ä—É–∑–∏–Ω—Å–∫–æ–µ –±–∏—Å—Ç—Ä–æ", "–ö–∞—Ö–µ—Ç–∏ –ö–∞—Ñ–µ"],
        "–ü–∞—Ä–∫–∏": ["–≠–∫–æ–ø–∞—Ä–∫ ¬´–ó–∞—Ç—é–º–µ–Ω—Å–∫–∏–π¬ª", "–ì–∏–ª—ë–≤—Å–∫–∞—è —Ä–æ—â–∞", "–¶–≤–µ—Ç–Ω–æ–π –±—É–ª—å–≤–∞—Ä"],
        "–ú—É–∑–µ–∏": ["–ú—É–∑–µ–π–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –∏–º–µ–Ω–∏ –ò. –Ø. –°–ª–æ–≤—Ü–æ–≤–∞", "–ú—É–∑–µ–π ¬´–ì–æ—Ä–æ–¥—Å–∫–∞—è –î—É–º–∞¬ª", "–†–æ—Å—Å–∏—è ‚Äî –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è"]
    }
}

# –ö–æ–º–∞–Ω–¥–∞ /catalog
@bot.message_handler(commands=['catalog', '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'])
def handle_catalog_command(message):
    try:
        chat_id = str(message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        if chat_id not in user_data or not user_data[chat_id].get('confirmed'):
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ /find_city")
            return
            
        city = user_data[chat_id]['city']
        normalized_city = normalize_city_name(city)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–µ
        if normalized_city not in CITY_CATALOG:
            bot.reply_to(message, f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ—Ä–æ–¥—É {normalized_city}")
            return
            
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = list(CITY_CATALOG[normalized_city].keys())
        categories_list = "\n".join([f"{i+1}. {cat}" for i, cat in enumerate(categories)])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[chat_id]['catalog'] = {
            'city': normalized_city,
            'categories': categories
        }
        save_user_data()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for i, category in enumerate(categories):
            markup.add(types.KeyboardButton(f"{i+1}. {category}"))
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
        
        bot.send_message(
            chat_id,
            f"üèôÔ∏è –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞ {normalized_city}:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ—ë –Ω–æ–º–µ—Ä:\n\n"
            f"{categories_list}\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=markup
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda message: message.text.startswith(('1. ', '2. ', '3. ', '4. ', '5. ', '6. ', '7. ', '8. ', '9. ')))
def handle_category_selection(message):
    try:
        chat_id = str(message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
        if 'catalog' not in user_data.get(chat_id, {}):
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ /catalog")
            return
            
        catalog_data = user_data[chat_id]['catalog']
        city = catalog_data['city']
        categories = catalog_data['categories']
        
        # –ü–æ–ª—É—á–∏–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        try:
            category_num = int(message.text.split('.')[0]) - 1
        except:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
        if category_num < 0 or category_num >= len(categories):
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
            
        category = categories[category_num]
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        places = CITY_CATALOG[city][category]
        places_text = "\n".join([f"‚Ä¢ {place}" for place in places])
        
        # –ó–∞–º–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        remove_keyboard = types.ReplyKeyboardRemove()
        
        bot.send_message(
            chat_id,
            f"üìç {category} –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n{places_text}\n\n"
            "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog",
            reply_markup=remove_keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def handle_cancel(message):
    try:
        chat_id = str(message.chat.id)
        if 'catalog' in user_data.get(chat_id, {}):
            del user_data[chat_id]['catalog']
            save_user_data()
        
        remove_keyboard = types.ReplyKeyboardRemove()
        bot.send_message(
            chat_id,
            "‚ùå –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=remove_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather
@bot.message_handler(commands=['weather'])
def get_weather(message):
    try:
        chat_id = message.chat.id
        command_parts = message.text.split(maxsplit=1)
        
        if len(command_parts) > 1:
            city = command_parts[1]
        else:
            if str(chat_id) in user_data and user_data[str(chat_id)].get('confirmed'):
                city = user_data[str(chat_id)]['city']
            else:
                bot.reply_to(message, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
                                      "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ú–æ—Å–∫–≤–∞")
                return

        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()
        
        if data.get('cod') != 200:
            error_msg = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", 
                callback_data="weather_manual"
            ))
            
            bot.reply_to(
                message, 
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}: {error_msg}", 
                reply_markup=markup
            )
            return
            
        weather = (
            f"‚õÖ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
            f"üòì –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
            f"‚òÅÔ∏è {data['weather'][0]['description'].capitalize()}"
        )
        bot.reply_to(message, weather)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
@bot.callback_query_handler(func=lambda call: call.data == 'weather_manual')
def handle_weather_manual(call):
    bot.send_message(
        call.message.chat.id,
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /weather –ú–æ—Å–∫–≤–∞"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        bot.polling(none_stop=True, interval=1)
    except Exception as e:
        
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
